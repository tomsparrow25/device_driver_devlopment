1. what is a callback function ?
http://www.opensourceforu.com/2012/02/function-pointers-and-callbacks-in-c-an-odyssey/

2. how user space call-back function to be invoked when an interrupt is received ?
ANS: Callback from kernel space to user space

Use SIGNAL method in order to notify from the kernel module to user pace
program.

Before seding signal the kernel module need the process ID of the user
space program.

In the kernel module:

struct siginfo      sinfo;    /* signal information */
pid_t  pid;                   /* user program process id */
struct task_struct *task;


/* init */
memset(&sinfo, 0, sizeof(struct siginfo));  
sinfo.si_signo = SIGIO;    // Config the signals
sinfo.si_code  = SI_USER;  // Config SI_QUERE std or SI_KERNEL for RTC


pid = your_user_space_PID;

task = find_task_by_vpid (pid);           
if(task == NULL) {
   printk ("Cannot find pid from user program\r\n");
   return;
}

/* send SIGIO to the user program */
send_sig_info (SIGIO, &sinfo, task); /* Send signal to user program */ 


In user program :

void signal_handler (int signum) {
     if (signum == SIGIO) printf ("SIGIO\r\n");
     return;                  
}

struct sigaction action;
memset (&action, 0, sizeof (action)); /* clean variable */
action.sa_handler = signal_handler;   /* specify signal handler */
action.sa_flags = 0;                  /* operation flags setting */
sigaction (SIGIO, &action, NULL);     /* attach action with SIGIO */

3. what is signal handler, interrupt handler, isr ?
4. It is possible to write a GPIO interrupt handle code in user space?
5. callback or notification from kernel to user space ?
Bitwise   http://amsekharkernel.blogspot.in/2013/07/c-interview-questions.html
http://amsekharkernel.blogspot.in/2012/02/how-to-write-make-files-for-real-time.html
http://programmers.stackexchange.com/questions/tagged/bitwise-operators

* BitWise Operators in C
  There are six bitwise operators. They are:
   &   The AND operator
   |   The OR operator
   ^   The XOR operator
   ~   The Ones Complement or Inversion operator
  >>   The Right Shift operator
  <<   The Left Shift operator.

Find Position of the only Set Bit
First of all we will check if number is power of two, Beacuse then only its binary represenattion will contain only one “1″.
After that, start from rightmost bit and one by one check value of every bit. Following are steps:
1) Initialize two variables; i = 1 (for looping) and pos = 1 (to find position of set bit)
2) Inside loop, do bitwise AND of i and number ‘N’. If value of this operation is true, then “pos” bit is set, so break the loop and return position. Otherwise, increment “pos” by 1 and left shift i by 1 and repeat the procedure.
01	int isPowerOfTwo(unsigned n)
02	{  
03	    return n && (! (n & (n-1)) ); 
04	}
05	 
06	 
07	// Returns position of the only set bit in 'n'
08	int findPosition(unsigned n)
09	{
10	    if (!isPowerOfTwo(n))
11	        return -1;
12	  
13	    unsigned i = 1, pos = 1;
14	 
15	    while (!(i & n))
16	    {
17	        // Unset current bit and set the next bit in 'i'
18	        i = i << 1;
19	        ++pos;
20	    }
21	  
22	    return pos;
23	}
Find if a no is Power of Two
Method 1: (Using arithmetic)
Keep dividing the number by two, i.e, do n = n/2 iteratively. In any iteration, if n%2 becomes non-zero and n is not 1 then n is not a power of 2. If n becomes 1 then it is a power of 2.
/* Function to check if x is power of 2*/
01	bool isPowerOfTwo(int n)
02	{
03	    if (n == 0)
04	        return 0;
05	    while (n != 1)
06	    {
07	        if (n%2 != 0)
08	            return 0;
09	        n = n/2;
10	    }
11	    return 1;
12	}
Method 2: (Using Bitwise operator)
If we subtract 1 from a number that is power of 2 then all unset bits after the only set bit become set and the set bit become unset.
For example for 4 ( 100) and 16(10000), we get following after subtracting 1
3 –> 011
15 –> 01111
So, if a number n is a power of 2 then bitwise & of n and n-1 will give zero. We can say n is a power of 2 or not based on value of n &(n-1).
1	bool IsPowerOfTwo(long x)
2	{
3	    return (x & (x - 1)) == 0;
4	}
For completeness, zero is not a power of two. If you want to take into account that edge case, here’s how:
1	bool IsPowerOfTwo(long x)
2	{
3	    return (x != 0) && ((x & (x - 1)) == 0);
4	}
Lets understand this with example
bool b = IsPowerOfTwo(4)
if x = 4
return (4 != 0) && ((4 & (4-1)) == 0);
Well we already know that 4 != 0 evals to true, so far so good. But what about:
((4 & (4-1)) == 0)
This translates to this of course:
((4 & 3) == 0)
But what exactly is 4&3?
The binary representation of 4 is 100 and the binary representation of 3 is 011 (remember the & takes the binary representation of these numbers. So we have:
100 = 4
011 = 3
1 & 1 = 1, 1 & 0 = 0, 0 & 0 = 0, and 0 & 1 = 0. So we do the math:
100
011
—-
000
BIT-WISE Operators C-Faqs:

1. How to set particular bit in a number? 
To set any bit in a number, Use (OR ) operator. 

Number = Number | (1<<x)
'x' indicates the position of the bit
  

2. How to clear particular bit in a number? 
To clear any bit in a number, Use (AND ) and (NEG (~)) operator. 

Number = Number & ~(1<<x) 
  
3. How to toggle or flip particular bit in a number?
 To toggle any bit in a number, Use (^ ) exclusive OR operator.  

Number = Number ^ (1<<x) 

4.How to check particular bit is set or not in a number?
To check any bit in a number, Use (& ) And Operator .  
Number & (1<<x)  
                                                      'x' indicates the position of the bit  

5. How to represent the above in MACRO's for Real time code?

#define SET_BIT(Number, bit_position)    Number |= (1<< bit_position) 

#define CLEAR_BIT(Number, bit_position)    Number &= ~(1<< bit_position) 

#define TOGGLE_BIT(Number, bit_position)    Number ^= (1<< bit_position) 

#define CHECK_BIT_IS_SET_OR_NOT(Number, bit_position)    Number & (1<< bit_position)

6. How to check the number is Even or Odd?
#include<stdio.h>
int main()
{
  int number;
  printf("Enter the Number \n");
  scanf("%d", &number);

  if(number & 1)
    printf(" It is ODD number \n");
  else
    printf(" It is Even number \n");
} 

6. How to count number of  1's or bits set in a number ?

#include<stdio.h>
int main()
{
  int n, count=0;
  printf(" Enter the Number :\n");
  scanf(" %d", &n);

  while(n)
  {
    n = n&(n-1);
    count ++;
  }  printf(" No of Bits set count in the Number is %d\n", count);
  return 0;
}
 
7. How to count number of  0's or bits unset in a number ?
  
#include<stdio.h>
#define CHAR_BYTE 8
int main()
{
  unsigned int num, count =0, index;
  printf(" Enter the Integer \n");
  scanf("%d", &num);

  for(index = 0; index < (CHAR_BYTE * sizeof(int)); index++)
  {
     /* check the Bit is Set to Zero */
     if((num & (1 << index)) == 0)
     {
        count ++;
     }
  }
  printf(" The Number of Zero's present in Integer: %d\n", count);
  return 0;
}

 8. How to find out a number  is power of 2  or not? 

 #include<stdio.h>
int main()
{
  unsigned int n;
  printf("Enter the Number \n");
  scanf("%d", &n);

  if((n != 0) && (n & (n-1)) )
      printf(" It is Not power of 2\n");
  else
      printf(" It is power of 2\n");

 return 0;
}


 9. How to Swap two numbers using Bit Wise Operators?  ( Remember as -> (ab, ba, ab)

#include<stdio.h>
int main()
{
   int a, b;
   printf(" Enter the Value of a and b\n");
   scanf("%d %d", &a, &b);
   a = a ^ b;
   b = b ^ a;
   a = a ^ b;   

/* 
   or 
   a = a + b;
   b = a - b;
   a = a - b;   */
 
   printf("Value of a : %d and b : %d\n", a, b);   
   return 0;
}

10. How to reverse a string with out using Temporary variable?

#include<stdio.h>
#include<string.h>

#define LEN 100 /* Can be changed */
int main()
{
   char str[LEN];    
   unsigned int end, start=0;

   printf(" Enter the String to be reversed  \n");
   scanf("%s", str);

   /* Find out the string Length */
   end = strlen(str)-1;
   /* Iterate through start less than end */
   while(start < end)   
   {
     str[start]   ^= str[end];
     str[end]     ^= str[start];
     str[start]   ^= str[end];
     
     start++;
     end --;
   }
   printf("The Reverse string is : %s\n", str);
   return 0;
}
Suppose, I have two numbers A and B. I need to find out how many numbers of bits needed to be changed to convert A to B.
Like:
A = 1101101
B = 1011011
     ^^ ^^
Here, we need to change 4 bits to convert A to B
* Check if a number is a multiple of 3
A number is multiple of 3, if the difference between the count of SET bits in odd and even postions are also multiple of 3. Following is a recursive routine in C to accomplish this logic.
int isMult3(unsigned int n)
{
    int odd_c = even_c = 0; //variables to count odd and even SET bits
    
    // Terminating condition for the recursive routine.
    if (n == 0)    // return true if difference is 0.
    return 1;
    if (n == 1)    // return false if the difference is not 0.
    return 0;
    
    while(n) {
    if (n&1)   // odd bit is SET, increment odd_C
        odd_c++;
    n = n >> 1; 
    
    if (n&1)   // even bit is SET, increment even_c
        even_c++;
    n = n >> 1;
    }
    
    // Recursive call this function till you get 0/1 as the difference
    return(isMult3(abs(odd_c - even_c)));
}


* Multiply by 7 using bitwise operators
  return ((n << 3) - n );

Explanation: n << 3 will produce the effect of multiplication by 2n i.e. 8. (refer section - multiply by 2n)

* bit position of rightmost SET bit

A 2's complement of a number gives us all the bits complemented except the rightmost SET bit. Using this attribute we can arrive at the following code snippet.
    return (log2(n & (-n))) + 1;

Explanation: Anding 2's complement with the original number leaves us with only the righmost bit SET and others as 0. Now, we can take a log base 2 of this binary representation using Finding the log base 2 of an integer with MSB set . Add 1 to get the correct bit position.

* In an array, all the numbers are occurring even number of times, except only one number that occurrs odd number of times.. Find the number.

a XOR b always return TRUE if and only if a and b are different. We can use this property to figure out the element occurring odd number of times. XORing all the even elements will result in 0 leaving the odd - one out :-).
int getOddNumber(int arr, int arrSize)
{
    int i;
    int temp = 0;
    for (i = 0; i < arrSize; i++)
    temp = temp ^ arr[i];
    
    return temp; //number occurring odd number of times.
}


* Find out the number of bits that needs to be reversed to transform A to B

Again, XOR operator is at our disposal, XORing A and B, will SET the bits that are different and hence require bit-reversal in both A and B. After this, we need to count the number of SET bits. (Refer Calculating the count of SET bits in an integer)
return countSetBits(A ^ B);

* Get A % B where B is power of 2.

If B is power of 2, then it has only single bit SET. Let us take an example where A=17(0001_0001) and B=4(0100). To get the result of A % B, we need to return the 2 right-most bits, as these are the remainder if you are going to divide any number with 4(0100).
return (A & (B - 1));  

* Circular Rotatation of Bits of a number.

Circular rotation refers to the shift operation where instead of filling '0' to the bit pattern, we fill the falling bits from the other end.
#define INT_BITS 32
/*left circular rotation of  n by d bits*/
int leftCRotate(int n, unsigned int d) {
    return (n << d)|(n >> (INT_BITS - d));
}

/*Right circular rotation of n by d bits*/
int rightCRotate(int n, unsigned int d) {
    return (n >> d)|(n << (INT_BITS - d));
} 


Interview Experience - PART II 
Questions in C

1. What are static variables and static functions?
2. How to use a function in a file which is defined as a static function in a different file? (Function pointer)
3. A header file is written and included in two .c files. What is the problem in it? - Multiple definition of functions.
How can this be resolved?? (There are no problems when stdio.h is included multiple times. How is that possible?)
4. Given a string, find the number of occurrences of a sub string and print only those words that contain this sub string.
5. Write a program for pre-order traversal of a binary tree using recursion.
6. write a program for binary search in a tree.
7. Assign all the alternate bits of an unsigned short to an unsigned char.
8. What is the different stages of compilation of a c file?
9. What is the content of a .o file?
10. How to pass a command line argument to change a macro?
11. What is the difference between a MACRO and inline function?

Questions in LINUX

1. Write a simple Makefile
2. What all files will be packed in run time rpm, devel rpm.
3. How to add run time rpm as dependency to devel rpm in rpm spec file?
4. Why and when use cross compiler?
5. What is the difference between printf and write? (between library functions and system calls)
Interview Experience 
I am sharing here some of the interview questions that I faced in this post.

C
1. What is volatile and why is it used?
2. What is the necessity for a const qualifier?
3. What is little Endian and big Endian? Write a code to convert little endian to big endian and vice versa.
4. Write a single line macro to do the above conversion
5. Declare a structure.
6. Structure has been declared with int; char; int; char members in same order. What is the size allocated for it in memory? Is there a way to optimise it?
7. Implement a stack using linked list.
8. String copy without using default functions from string.h
9. How to toggle a bit in a number?
10. Convert decimal to binary
11. Verify if a linked list is a palindrome or not.
12. What will happen if there is
main()
{
printf("Hello");
while(1);
}
13. What is the difference between char * const ptr, char const * ptr and const char * ptr??
14. What are preprocessor macros?
15. What is compilation and linking?
16. Is a global variable extern?
17. Can a static variable be made extern?
18. What are static variables and static functions?
19. Is a MACRO advantageous or a function?
20. What is difference between macro and inline function?
21. Reverse a linked list.
22. Find the middle element of linked list in a single traversal.
23. What are the differences between malloc and calloc?
24. Where are static and global variables stored in the memory?
25. How can a multi threaded application be written?

Linux
1. What is a kernel?
2. What is difference between user space and kernel space?
3. Why kernel mode of operation is required?
4. What happens when a system call is made?
5. How a kernel can be live patched? (Ksplice)
6. sed related, awk related question
7. how to write a module?
8. How to write a system call? steps
9. How the boot time of an embedded machine can be reduced?
10. How are embedded distribution different from regular distributions?
11. rpm and all its options
12. patch and all its options
13. How to debug a shell script/binary?
14. what are different mechanisms of inter process communications?
15. What is procfs and sysfs?
16. The ways to set ip for an interface.
17. What all kind of tests LTP covers?
18. What is the need of asmlinkage?
19. How many arguments can be passed to a system call?
20. yocto related questions.
Linux Boot Process - Step by Step 
Linux Boot process is the process that happens right from power on until a shell appears for an user to start working on. Here I try to explain the process step by step.

1. Once the system is powered on, the control is taken by BIOS(Basic Input Output System).
2. This system triggers POST. POST is Power On System Test. It verifies that all hardware that are connected to the system are working fine.
3. If the verification succeeds, a bootable device is searched for. The bootable device could be a USB stick, a partition in hard drive, a CD ROM, via network etc.
4. When the bootable disk is identified, MBR is loaded from it. MBR is nothing but the Master Boot Record, which occupies the first sector (512 bytes) of the bootable device. Out of these 512 bytes, first 446 bytes consist of the primary boot loader information, next 64 bytes store the partition table information and the last 2 bytes store the magic for validating the MBR.
5. The MBR loads itself to the RAM and starts searching for the active partition. It also verifies no other partition is active at that point of time. It loads this in the RAM. In nut-shell it transfers control to GRUB.
6. The Grub (or earlier days it was lilo) uses /etc/grub/grub.cfg  file. It opens a boot menu, which lists the set of available distributions for deployment based on grub.cfg. If nothing is selected in this menu, the distribution which is specified as ddefault in grub.cfg will be deployed on the system.
7. After the decision of which distribution is to be deployed, an attempt is made to search for the kernel in the predetermined path. It will be zImage (Compressed, less than 512 Kb) or a bzImage(Big compressed, more than 512 Kb).
8. The head of this image itself will have some code that can
           a) Setup hardware
           b) Decompress the kernel image
           c) Copy the kernel to the memory.
9. Once the kernel is loaded into the memory,
           a) It initializes the memory and configures hardware that are connected to the system
           b) It finds the Initrd, decompresses it and mounts the Initrd.
           c) It then loads the kernel modules/device drivers.
           d) Initializes virtual devices.
After all this the smaller Initrd, which was used for bringing up the board is unmounted and the actual initrd is pivot_root ed. Some times it is possible to embed a small Initrd which contains only the bare essentials to bring up the board inside the kernel itself.
10. With this stage, The kernel is loaded and initialised. Now the control is transferred to user space.
           a) The first thing started in user space is /sbin/init. It runs with a PID 1
           b) Then /etc/rc.d/rc.sysinit script is executed.
           c) The /etc/inittab is executed. This is a special file, which spawns/starts services (like for console logging, syslog etc). Here the run level can also be mentioned.
           d) Then all the services i /etc/rc.d/rc<RUN LEVEL>.d is started.
           e) The last step is execution of /etc/rc.d/rc.local. This script can be very useful if we need to customise the start up procedure. 

Once all this is done, Shell is available for the user to start using the system.
Linux Kernel Module : Internals of insmod and rmmod 
The post intends to explain the internals of a kernel module and the way insmod and rmmod utilities work.

Internals of a kernel module 
         The kernel module is a dynamically loadable section of the kernel. It means it is a piece of kernel code which can be added to the running kernel when loaded and can be removed from kernel when the functionality is not required.
         To do so, the kernel configuration of the object is to be made as m, ie., CONFIG_<object> = m in the .config of the kernel build directory. To be more precise, the object has to be given as obj-m in the Makefile.
         This configuration and building will provide a .ko which is nothing but the kernel module. Many device drivers can be written this way, so that they can be loaded only when necessary and can be removed otherwise. This reduces the actual size of the kernel image.
         The loading of a kernel module can be performed by insmod or modprobe utilities, whereas unloading can be done by rmmod utility. These utilities are supported as part of busybox package and module-init-tools package. The busybox commands will not have all the features and options supported. Hence module-init-tools can be installed. If there is a constraint on size, the busybox package itself can be used for basic functionality.
          The kernel module after compilation is nothing but an elf file. It will have .text section for the instructions, .data for the data, .bss section for uninitialized data, .init.text for module_init function of a module, .exit.text section for the module_exit function of the module and .modinfo section which has all the macros.

How insmod works
1) Insmod is a small program, which calls init_module() to intimate the kernel that a module is attempted to be loaded and transfers the control to the kernel.
2) In kernel, sys_init_module() is run. It does a sequence of operations as follows
    a) Verifies if the user who attempts to load the module has the permission to do so or not.
    b) After verification, load_module function is called.
        b.1) The load_module function assigns temporary memory and copies the elf module from user space to kernel memory using copy_from_user.
        b.2) It then checks the sanity of the ELF file (Verification if it is a proper ELF file etc)
        b.3) Then based on the ELF file interpretation, it generates offset in the temporary memory space allocated. This is called the convenience variables.
        b.4) User arguments to the module are also copied to the kernel memory
        b.5) The state of the module is updated to MODULE_STATE_COMING
        b.6) The actual location in the kernel memory is allocated using SHF_ALLOC
        b.7) Symbol resolution is done.
        b.8) The load_module function returns a reference to the kernel module.
    c) The reference to the module returned by load_module is added to a doubly linked list that has a list of all the modules loaded in the system.
    d) Then the module_init function in the module code is called.
    e) Module state is updated to MODULE_STATE_LIVE

How rmmod works
1) rmmod calls delete_module which hints the kernel that an rmmod request has come in and the control is transferred to kernel.
2) The sys_delete_module() is called in the kernel. This does following operations.
     a) Checks if the user who attempts to remove the module has the permission to do so or not.
     b) Checks if any other module that is loaded is dependent on the module attempted to be unloaded. This information can be obtained from the modules_which_uses_me list.
     c) Checks if the module is actually loaded or not in the kernel. This is done by verifying if the current state of the module is MODULE_STATE_LIVE.
     d) It executes the module_exit function written in the module code.
     e) Then free_module function is called, which does the following.
          e.1) Removes any sysfs references of the module
          e.2)Removes all the kernel module object references.
          e.3) Performs architecture specific clean up if any.
          e.4) Unloads the module from kernel
          e.5) Updates the state of module to MODULE_STATE_GOING
          e.6) Frees the memory used by user space arguments for the module.
Writing a linux system call 
WHAT IS A SYSTEM CALL?

System call is an interface (the only interface) between user space and the kernel. It is more than a normal function. It creates a trap (soft interrupt) to make the kernel perform a specific task. 

Examples of System call 

The applications we use might use many system calls. But as a person with limited experience we might not be aware of this fact. 
Some examples include - open, chown, seek etc.

Can I write my own system call?

Of course, we can. This is the beauty of it and the same can be stated as "kernel programming":)

How do I write a system call?

It is quite simple in latest Linux kernels, unlike the older ones (2.6 and older). 
The steps are elaborated below. 

1. Get the source of your kernel tree. 
2. There is a syscall table in the kernel, which is specific to architecture. 
<kernel>/arch/<architecture>/syscalls/syscall_32.tbl
This table contains the ID of system call, its name and its function name. Add your system call entry in this file. Please make sure that you give a unique ID number to your system call based on the current number of system calls. 
3. Add the prototype of the system call in include/Linux/syscalls.h file. 
4. Add the system call definition in any file (new or can be appended in existing file). In case of a new file. Make necessary modification in the Makefile of parent directories recursively, until this file is treated for compilation. 
NOTE : in steps 3 and 4, asmlinkage is to be done. 
5. Once these modifications are done, Compile this kernel and deploy the image
a) make menuconfig
b) make
c) make modules
d) make modules_install
e) make install

6. make install will take care of copying kernel image to /boot directory and to update grub configuration.
7. reboot. Select your kernel image during board bring up. 
8. Write an application that will invoke your system  all and verify that your system call exists, it is called and it works as u intended it to. 
This can be done by syscall(<SYSCALL ID>,<Parameters if any>)

What else should I remember?

1. The system call can return a value and can get arguments. 
2. The number of arguments that can be passed to the system call is specific to the architecture. 
This is because each architecture support different number of registers. Eg : x86 supports 6 registers. 
3. Because of the above difference specific to architecture, the number of system calls for same kernel version might differ from architecture to architecture. 
4. Although the usage of most of the common syscalls are still the same. 
5. The syscall can get parameters of size of upto unsigned long int. (size of register dependent). 
How to write a simple Kernel module 
After a long break, I am starting this simple post on how to write a kernel module.

I will demonstrate with code, how to write a module that prints message on loading and unloading and nothing more. This will give a good hands on understanding the Makefile and kernel modules.
SOURCE
Consider the following simple .c file

#include<linux/module.h>
#include<linux/moduleparam.h>

#include<linux/stat.h>

MODULE_AUTHOR("GOMATHI KUMAR");
MODULE_LICENSE("GPL");

static int abc=5;
static char *name="sweets";
module_param(abc,int,S_IRUGO | S_IWUSR);

module_param(name,charp,S_IRUGO | S_IWUSR);

static int init_mod()
{
        printk(KERN_ERR "%s: %s : HI.. Good day...\nLoading your module\nabc = %d and name = %s\n", __FILE__, __FUNCTION__, abc, name);
        return 0;
}
static int exit_mod()
{
        printk(KERN_ERR "%s: %s : End of module\n\nBye! Bye!!\nabc = %d and name = %s\n", __FILE__, __FUNCTION__, abc, name);
        return 0;
}
module_init(init_mod);
module_exit(exit_mod);

This c file shows two simple functions that will be executed during init and exit of the module. 

Points to be considered in the above c file : 
a) Module_init and module_exit functions define which function is to be called during loading and unloading of the module
b) printk is the kernel function equivalent of printf that is used in user space. The printks can be used in different log levels such as KERN_ERR, KERN_WARN etc based on the level of importance. This can be used for kernel debugging, though using printk is not an efficient way of kernel debugging. 
c) __FILE__ and __FUNCTION__ are predefined macros, that will print the name of the file and function. There are other such macros, which will give useful information. 
d) The details that are displayed when we do modinfo is from MODULE_AUTHOR, MODULE_LICENSE etc that are defined in the above c file.
e) module_param will help in passing parameters to the module during runtime. This will create entries in sysfs as follows
/sys/module/<YOUR MODULE>/paramaeter/<MODULE_PARAM_YOU_DEFINED>
For the definition of module_param function, moduleparam.h has to be included.
The permissions for reading and writing can be controlled by the third parameter in module_param. The permissions S_IRUGO, S_IWUSR etc are defined in stat.h
Once write permission is given, we can change sysfs entry and from then on that value will be retained.
If not through sysfs, these parameters can be passed during runtime along with insmod as follows
insmod abc.ko <MODULE_PARAM_YOU_DEFINED>=value

MAKEFILE
To compile this as a module, the following simple makefile can be used. 

obj-m := abc.o
all:        make -C /lib/modules/$(shell uname -r)/build M=$(shell pwd) modules
clean:        make -C /lib/modules/$(shell uname -r)/build M=$(shell pwd) clean
Points to be considered in the above Makefile : 
a) obj-m defines that the source will be compiled as a module. In Kernel Makefiles, we can find obj-CONFIG_<SOMETHING> This will define whether to build as module or as part of kernel image, based on the kernel configuration. 
b) all and clean are targets. When we say make clean, only the command beneath "clean:" will be executed. 
c) The above makefile builds based on a single source file. To compile multiple source files into one module, we can use as follows

abcdef-objs := abc.o def.o

d) This makefile shows building of modules for the build machine itself. If we are compiling for a different platform, cross compilation would come into picture. 

Building and Loading of Module
a) To build this, just entering make will do. In the build dir, we will get 

abc.c  abc.ko  abc.mod.c  abc.mod.o  abc.o  Makefile  modules.order  Module.symvers

b) To load the module, insmod <module name> will work. If an error pops as "Operation not permitted", try with sudo. For more clarity on why this error occurs, refer to my previous post 
http://gomathikumar1006.blogspot.in/2013/09/linux-kernel-module-internals-of-insmod.html

The messages printed will not come on console always. You might have to check it in dmesg. 

NOTE: If the kernel logs coming on the console are to be turned off, echo 0 > /proc/sys/kernel/printk

c) To unload a module, do a rmmod'

d) To do a modprobe, the module has to be added in /lib/modules/`uname -r`/modules.dep and the module should be available in /lib/modules/`uname -r`. So It is acceptable if upon doing modprobe ./abc.ko shows FATAL : Module not found. 


Linux Kernel Developer Interview Questions 
Synchronization

1) why spinlock? why can only mutex
2) explain different synchronization constructs available under linux
3) do you used semaphore while coding? explain scenario

Scheduler

1) when a process is in infinite while loop? how scheduler will come to high priority process is waiting for scheduler
2) why copy_from_user() and copy_to_user() used ? why copy_to_user() user even though kernel could  write at any user space?
3) Explain steps b/w process1 calls sleep and then wakes up, in below fig
 
4)  what is cooperative scheduling and list adventages and disadventages

  

Memory manager

1) how memory is allocated in Linux
2) Describe role of memory manager while executing program(i mean to run/execute a program written by user,  what memory manager service will come into picture)
3) what are the data structures used to design memory manager in Linux 
4) what are memory Zones ?
5) what is the difference between kmalloc and vmalloc 
6) how kernel manage to allocate memory when running interrupts? will it able to allocate?
7) What memory barriers available @ Linux and why we need them 

Unix system Programming
1) write a program to create orphan process
2) write a program to create a Zombie process
3) write algorithm  to implement a shell
4) write a script to find types of files present in current directory 
5) what is fork and vfork
6) what exec function will do, explain
7) what is shell? how it executes commands
Qualcomm Interview Questions 

How many interrupt lines you have been used in your driver development.
UART : 1 (RX)
Ethernet: 2 (RX & TX)
I2C : what is I2C Clock Stretch, Bus line clear.

How do u debug when an process aborted.

How many Exceptions are there in ARM.

what are the methods or functions to raise execute the interrupt process when interrupt occurs.


C-Questions
1) Find the size of a structure with out size of operator.

struct  XYZ{
    int x;
    float y;
    char z;
};

int main(){
    struct XYZ arr[2];
    int sz = (char*)&arr[1] - (char*)&arr[0];
    printf("%d",sz);
    return 0;
}

OS
2) what is the output of the below program
    Function(void)
   {
     fork(); fork(); fork();
    printf("Hello world");
   }
ans: Hello world will be printed for 8 times.

L&T Interview Questions:

1) Timer Interrupts and related drivers.
2) How to delete similar nodes from a linked list, not by traversing every node.
3) ARM Internal Architecture.
4) Power Management Techniques - Experience.
5) Explain me any driver you worked on.
6) Interrupt based driver.
7) Advantages and disadvantages of Polling & Interrupt drivers.
8) Android Frame work.
9) What are the different modes in ARM.
10) How a interrupt will be handled  in Linux.
11) What is the difference between IRQ & FIQ.


Work:
1) Touch screen Device drivers.
2) USB Device driver Experience.
3) Power Management Techniques.
 

Domain : Multimedia 

C/C++/OS concept


Q1.  Brief me about yourself , skill and experience? 
Q2 . Brief me about your experience related work?
Q3 . Why do you want to join Qualcomm?
Q4.  How much do you rate yourself in C,C++ , OS and Multimedia out of 10?
Q5. What are the storage classes? Tell the scope and life of each one?
Q6. What is the difference between static and global variable?
Q7. What is the use of volatile variable ? Give one example.
Q8.  What is the difference between Macro , Inline function and Template? Explain the advantages and disadvantages.
Q9.  Are you aware of RAM , ROM and Cache memory? Brief.
Q10. What is Segmentation fault. what are different segmentation fault?
Q11 . What do you mean by Paging . Why do we need it?
Q12 . What is fragmentation and How can you prevent this?
Q13 . What is virtual memory concept? Why do we need it.
Q14. What is difference between struct in C and C++?
Q15. What is function pointer? When do we use it? Give one example.
Q16. What is the difference between process and thread?
Q17. What is context switching? How does Scheduling happens?
Q18. What is Critical Section? How will you protect it?
Q19. What is difference between Mutex, Semaphore and Binary Semaphore?
Q20. What are different IPC mechanism? Explain each in short. 
Q21. What do you mean shared memory among process? How will you implement it.

Q22. What is virtual function. How does pure virtual function different from it.
Q23 What is Abstract Class? How can we access the members of it.
Q24 What is friend function.
Q25. If A is base class and D is derived class . can we access the member of D using A's object .yes or no And how?
Q26. Explain ISR .Top/bottom halves mechanism
Q27. Difference between softirq , tasklet and workqueues.
Q28. What is Event Callbacks . Give one example.
Q29. What is a buffer . how does it gets allocation and maped to physical mem.
Q30. Explain System calls , how does it go from user space to kernel space.
Q31. What is Spin lock and how does it differ from mutex & semaphore.
Q32. Comparing int and unsignedint. what will be typecast. 
Q33. What is Q-format. Where do we use it?
Q34. What is diff between floating and fixed point reference?
Q35. What is Static variable and function. Where do we use this. Explain Factory object model.

Programming Questions: 
Q1.  Implement malloc of your own and explain in general how does it work.
Q2.  Implement memcpy ,memmove and memset.
Q3.  Reverse a given String in place
Q4.  Reverse a given single linked list and double linked list in place.
Q5.  Write a small program to find the endiannes of system.  
Q6.  Write a program to find palindrome word in a given string lets say My name is Nitin.
Q7.  Write a program to transpose a matrix 4x4.
Q8.  Write a program for matrix multiplication.
Q9 . Write a program to find the intersection of two linked list.
Q10. Implement Stack and Queue.
Q11. Write a program for Run Length Encoding in a given string.
Q12. Write a program to find a substring in a given string.
Q13. Write a program to enter the element in a sorted linked list.
Q14. Write a program to find loop in a linked list.
Q15. Write a program to replace s in given string by m  and m by s - "sy nase im sohit mingh"
Q16.  Determine whether linked list is circular or not.
Q17. Find the mid of linked list.
Q18. Give the ISR method signature and Write a small interrupt handler?
Q19. what does malloc(0) returns . is it NULL?
Q20. Write a multithreading program to print even and odd numbers till 100 using  two threads T1 / T2.
Where T1 will print  1 3 5 7 .... and T2 will print 2 4 6 ... 

Bitwise questions:

Q1.  Swap Bit at mth and nth position from Right.
Q2. Toggle Bit at 6th position from Right.
Q3. Count number of 1's in given integer.
Q4. Swap bits from 0th to 2nd positon to 5th to 7th.

puzzles :

1. There is a long string of 15cm size . You need to cut them in minimum way and keep in such a way that you can generate any length string till 15 cm by tying them.

Use binary funda 1 2 4 8

- | -- | ---- | --------  , so there are only 3 cuts and you can generate any length string till 15 cm size.

2.  There are three boxes wrongly labeled as Apple, Orange and  Apple&Orange.You need to take out of one item from any of the one box and then tell the box label correctly in once chance.

[A]       [O]    [A&O] wrongly labeled 

take out  one item from [A&O] box , if its apple then its Apple box , and [O] is wrongly labeled so it would be A&O , [A] would be Orange box . or similarly if its Orange out of the A&O box.

3. There are 10 cartoons of Cigar of 10 cigars in each of 10 grams each. In one of the cartoon 10 Cigars are packed of 11 gm each by mistake.  Find out the cartoon having 11 gm Cigars by measuring once.

place cartoon in a row , from left : pick one cigar from 1st cartoon  two from 2nd , three from 3rd and so on till 10 from 10th last one.

Weight them all , Ideally each Cigar weighs 10gm , so total weigh should be 10+20+30+40+50+...+100 =  550 gms

Now , If there is 11 gm Cigar in 1st cartoon from left then the above sum would have come as 551
if its in 2nd Cartoon from left then sum would have come as 552
3rd .....553
4th .....554
5th......555   .................if its in 10th then 560 gms


Nvida

Domain : Android Multimedia 

C,C++,OS questions similar to Qualcomm question.

Programming :

1. Write a program to allocate 2-D memory.
Ans:
Allocating 2D memory can be taken as two dimensional array , where row can be allocated first then column using double pointer.

int **p;
p = malloc( rows * sizeof(int*));

for(int i = 0; i{
*(p+i) = malloc(column * sizeof(int));
} 

One can also assign some character pattern to this two dimensional memory.

2. Write a program to draw circle with 1 at circumference in a NxN matrix = {0}.
Ans:
1. Divide the entire Matrix in four equal part.
2. In first quadrant , Arc can be drawn and replicate for other 3 quadrant.
3. To draw an Arc by 1 over the 1st Quad Matrix of N/2 x N/2, Assign the value 1 to all the point which should lie on circumference of the circle.
4. Centre of Circle = {N/2,N/2}
5. Radius = {N/2}
6. In 1st quad starting from first row i.e.  x = 0 , the y co-ordinates to lie on circle circumference should come as per formula Sqr(x-a) + Sqr(y-b) = Sqr(radius)
so y would be    Sqroot{|Sqr(N/2) - Sqr (|x - N/2|)|} for x vary from 0 to N/2 to form an Arc.
7. Assign the array value to 1 for obtained (x,y).

3. Write a program to implement itoa().
4. Write a multi-threaded parallel program to solve the equation :
 10a + 10b + 10c + 10d.
Assuming there are four cores.
5. What is the O/P of

a) int main() {
           printf("%x", main());
           return 0;
} 

b) int main() {
int a = 11;
char *str = "nvidia";
char arr[10] = "talk";
strcpy(str, arr);
}

c) if(malloc(0) != NULL) {
      printf("good");
     } else {
       printf("bad"); 
     }

d) int a = -20;
    unsigned int b = 6;
    if(a>b) 
      printf("unsigned");
     else
      printf("signed");
e)  int main() {
      fork();
      fork();
      fork();
      printf("hello fork");
     }
and Explain.

6. Explain the high level flow of Android Video playback.
7. What do you mean by Data tunneling.
8. What are the different System Signals
    SIGABRT - Abnormal termination
    SIGFPE - erroneous Arithmetic operation
    SIGILL  - illegal instruction.
    SIGINT - interactive attention signal
    SIGSEV - An invalid access to storage
   SIGTERM - termination request   etc
can refer http://en.wikipedia.org/wiki/Unix_signal
9 . Which mp4 atom is responsible sync for I - frame.
10. Explain RTSP streaming.
11. Explain state transition of OMX Component.
12. Explain the AV Sync logic.
13. Try to explain the high level logic of Audio recording.
14. find out the average of two number efficiently
     a>>1 + b>>1
15. Lets say input is N = 1000 0000 0000 0000 and M = 10101
copy M into N from position i = 2 to j = 6th of N.
O/P should be N = 1000 0000 0101 0100
16. Lets say there is an integer a , extract the position of different value c from the set (0,1,2,3)
as bits in a and save the position value in b. Write a macro for this
c = Extract_bit(a,b);

#define Extract_bit(a,b)   .................................
17. What are the video artifacts have you observed. Can you explain the reason behind them.
18. What are the Green frames. What does it signifies. Why is it green by the way?
19. What does the Grey frames indicate.
20. Write a program to calculate the amount of loan repayment year , where you have taken loan of amount P with rate r% annual. You do payment of amount A every year.

puzzles:

1. In a Cricket Match , there are two balls remained , and last pair is on the pitch with seven runs remained to win. In what there will be win for batting team.

2.  There is long number having total digit count to be 1996 like
  abcdef ........1996  each two digit pair in the number is either divisible by 17 or 23.
find out the last digit of this number. 

3. Number of zeroes in 100!

Multimedia

AUDIO:

What are the audio file types , mime types and container formats you are aware of ? 
What is the difference between AAC-LC / AAC+ / eAAC ? 
What is the difference between AMRNB and AMRWB
For which apps AMR is preferred over AAC ? 
Which Music quality is better - MP3 / AAC ? Why ?
Can we play 5.1 channel audio content on android handsets ? If so, in which android releases ?
How do you verify that the audio output of music playback is indeed  correct ? 
What is the audio routing strategy used in android when you have multiple audio output devices such as BT headset, etc ?
What is the difference between Speech recorder and Sound recorder app ? 
What is echo cancellation  noise suppression and audio effects support available in android ?
What is Sampling frequency?What do you mean by 48Khz?
What is bitrate ? what does 128Kbps mean.
What is significance of Audio Flinger and what does it do?
Explain the Threads running in Audio Flinger?
What is the work Mixer thread? How is Fast Mixer thread different.
What is ALSA , How is it interacting with Audio Framework.
What is Periodic Buffer. What are latency, buffer periods and size.
Explain the Audio Encoding/Decoding flow
What is PCM? what is difference between 16-bit and 32-bit PCM
What is difference between Audio Sink and Audio Output
How is Audio Track being written
What would be impact of CBR and VBR on the Audio
How will you take PCM sample dump. 

 

VIDEO:

What are the video  file types , mime types and container formats you are aware of ? 
Which video format is preferred in digital TV ? 
How do you convert video of one resolution to another ? 
What is aspect ratio ? what are the standard values used for video ?
What are the raw video formats that can be rendered to any display device ? What is the difference between those raw formats ?
How will you check the frame rate to be 30fps for encoding as well as decoding.
How will you dump the YUV frames.
What is Surface Flinger. How does video rendering happen.
What is hardware composer. How does Composition happen.
What will be the impact if the video buffers get stuck within decoder. and how will you handle.  


CAMERA
 
 1. camera kernel and HAL interaction 2. Sensor data to HAL 3. Sync between preview and Encoding 4. Bayer Format and resolution 5. ISP functionality 6. How does buffer gets exchanged from HAL to driver 7. What driver is doing 8. Preview frame drop 9. camera service functionality 10. flow from start preview till encoding via capture 11. block diagram of camera module . 12 . JPEG encoding flow in general 13 . DCT vs DFT vs Wavelet for JPEG 14. ISO significance 14. 3A need 15. How does a capture wroks Optics perspective 15. video snapshot functionality 16. how will you make use of multiple core to improve capture usecase?16. What will happen with preview and camera buffers if encoder is slower during recording.
 
IMAGE 
What are the video  file types  and mime types of Images you are aware of ? 
What happens when we view a GIF animation file in android device ? 
What are SMIL files and where are they typically used ? 
What are SVG files and where are they typically used ? 
What are PNG files and where are they typically used ? 
what is the difference betewen BMP and WBMP files ? 
Have you found any issues related to slideshow / thumbnails in gallery / sliding through the gallery ?



METADATA:
What is album art ? 
What is genre ?
What is ID3 tag ?
How do you validate the metadata fields ? 


GENERAL:
What are the different types of streaming for multimedia contents ? What is the difference between each of them ? 
How can we create RTSP streamable contents when a normal 3gp file is given ? 
What RTSP servers are you familiar with and which 3gpp standard did those servers support ? 
How did you measure jitter in RTSP/RTP streaming ? 
How do you measure video playback performance and verify audio-video sync ? 
Which multimedia framework is used in Android ? 
What multimedia codecs are used in Android - SW codecs, DSP codecs or HW codecs ? What is the difference between each of them ?
What are the performance issues /  power management related / quality-related issues you have reported ? 
which is the most complex/difficult issue you have found and reported ?
What happens if we rename the extension of media files such as rename .mp3 to .3gp , .3gp to .jpg , etc.. ?

Linux Internals Interview Questions
June 15, 2012 by bless2ashish 
Recently one of my friend asked me to share a list of topics on linux internals to concentrate when preparing to face interviews. I don’t personally prefer to prepare a few selective topics instead of making concepts. But sometimes a pointer to any important topic help anyone to prepare it hard. Here is the list of important topics on linux internals that one should give importance to while preparing for any interview. I have collected these topics on the basis of my own personal experience of appearing different interviews and taking a few also :) Thanks.
1.	Linux kernel architecture 
1.	Monolithic v/s micro kernel
2.	User space v/s kernel space ?
2.	IOCTL’s 
1.	Definition and their working Mechanism ?
2.	How to implement any IOCTL
3.	System call 
1.	How system call mechanism work in Linux.
2.	How to add a new system call.
4.	Interrupt handling in Linux 
1.	Tasklets
2.	How interrupt handling is done in linux (Should know each linux call)
3.	Fast interrupt v/s slow interrupt
4.	How IRQ’s are shared in linux (Shared interrupt line)
5.	Top half v/s Bottom half
6.	Tasklets (how they are implemented)
7.	SoftIRQ’s
8.	Can we use mutex and semaphres in ISR.
9.	What things can be done in ISR what things cannot be done in ISR
5.	DMA 
1.	How to make sure enough memory is available for DMA transfer
2.	Kmalloc v/s Zmalloc
6.	Signals 
1.	Different types of signals available in Linux and their default handlers ?
2.	How to implement a signal handler ? Try with real implementation.
7.	Mutex v/s Semaphore 
1.	Types of Semaphore
2.	Difference between mutex v/s binary  semaphore ?
8.	Threads v/s Process 
1.	A Process Block
2.	Thread is light wt. process, why?
3.	Advantages of using threads
4.	Why inter thread communication is treated lightweight than inter-process communication?
9.	IPC 
1.	Message Q
2.	Pipes
3.	Shared memory
4.	Signals
10.	IO 
1.	Memory mapped
2.	IO mapped
11.	Priority Inversion Problem and its below two solutions 
1.	Priority Inheritance
2.	Priority Ceiling
12.	Re-entrancy 
1.	What are reentrant functions ? What are conditions of re-entrancy ?


